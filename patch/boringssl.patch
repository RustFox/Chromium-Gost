From 8a887ea6ab61fc35b9a344bfc9f12945840ad457 Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Wed, 30 Jan 2019 15:04:56 +0300
Subject: [PATCH] boringssl GOSTSSL

---
 include/openssl/ssl.h   |   4 +
 ssl/handshake_client.cc |  11 +++
 ssl/internal.h          |  33 +++++++
 ssl/ssl_cipher.cc       |  90 ++++++++++++++++++
 ssl/ssl_lib.cc          | 204 ++++++++++++++++++++++++++++++++++++++++
 5 files changed, 342 insertions(+)

diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index da7731138..d88546596 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -4864,6 +4864,10 @@ BSSL_NAMESPACE_END
 
 #endif
 
+#ifndef NO_GOSTSSL
+#define SSL_R_TLS_GOST_REQUIRED 3072
+#endif // GOSTSSL
+
 #define SSL_R_APP_DATA_IN_HANDSHAKE 100
 #define SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT 101
 #define SSL_R_BAD_ALERT 102
diff --git a/ssl/handshake_client.cc b/ssl/handshake_client.cc
index 4041fe991..412a17bda 100644
--- a/ssl/handshake_client.cc
+++ b/ssl/handshake_client.cc
@@ -719,6 +719,17 @@ static enum ssl_hs_wait_t do_read_server_hello(SSL_HANDSHAKE *hs) {
   }
   hs->new_cipher = cipher;
 
+#ifndef NO_GOSTSSL
+  if( gostssl() )
+  {
+      if( gostssl_tls_gost_required( ssl ) )
+      {
+          ssl_send_alert( ssl, SSL3_AL_FATAL, SSL_AD_ILLEGAL_PARAMETER );
+          return ssl_hs_error;
+      }
+  }
+#endif // GOSTSSL
+
   // Now that the cipher is known, initialize the handshake hash and hash the
   // ServerHello.
   if (!hs->transcript.InitHash(ssl_protocol_version(ssl), hs->new_cipher) ||
diff --git a/ssl/internal.h b/ssl/internal.h
index bf4dd2f05..3fdc9fa5a 100644
--- a/ssl/internal.h
+++ b/ssl/internal.h
@@ -526,6 +526,13 @@ BSSL_NAMESPACE_BEGIN
 #define SSL_kPSK 0x00000004u
 #define SSL_kGENERIC 0x00000008u
 
+#ifndef NO_GOSTSSL
+#define SSL_kGOST 0x00010000L
+#define SSL_aGOST 0x00010000L
+#define SSL_eGOST 0x00010000L
+#define SSL_iGOST 0x00010000L
+#endif // GOSTSSL
+
 // Bits for |algorithm_auth| (server authentication).
 #define SSL_aRSA 0x00000001u
 #define SSL_aECDSA 0x00000002u
@@ -3016,6 +3023,32 @@ void ssl_set_read_error(SSL *ssl);
 
 BSSL_NAMESPACE_END
 
+#ifndef NO_GOSTSSL
+extern "C" {
+//
+int boring_BIO_read(SSL *s, void *data, int len);
+int boring_BIO_write(SSL *s, const void *data, int len);
+void boring_ERR_clear_error(void);
+void boring_ERR_put_error(int, int, int, const char *file, unsigned line);
+const SSL_CIPHER *boring_SSL_get_cipher_by_value(uint16_t value);
+char boring_set_ca_names_cb(SSL *s, const char **bufs, int *lens, size_t count);
+char boring_set_connected_cb(SSL *s, const char *alpn, size_t alpn_len,
+                             uint16_t version, uint16_t cipher_id,
+                             const char **cert_bufs, int *cert_lens,
+                             size_t cert_count);
+//
+char gostssl();
+//
+int gostssl_init();
+int gostssl_connect( SSL * s, int * is_gost );
+int gostssl_read( SSL * s, void * buf, int len, int * is_gost );
+int gostssl_peek( SSL * s, void * buf, int len, int * is_gost );
+int gostssl_write( SSL * s, const void * buf, int len, int * is_gost );
+void gostssl_free( SSL * s );
+int gostssl_tls_gost_required( SSL * s );
+//
+}
+#endif // GOSTSSL
 
 // Opaque C types.
 //
diff --git a/ssl/ssl_cipher.cc b/ssl/ssl_cipher.cc
index c4212926c..ad9546f26 100644
--- a/ssl/ssl_cipher.cc
+++ b/ssl/ssl_cipher.cc
@@ -208,6 +208,20 @@ static constexpr SSL_CIPHER kCiphers[] = {
      SSL_HANDSHAKE_MAC_DEFAULT,
     },
 
+#ifndef NO_GOSTSSL
+    /* Cipher 81 (GOSTSSL) */
+    {
+        "GOST2001-GOST89-GOST89",
+        "TLS_GOSTR341001_WITH_28147_CNT_IMIT",
+        0x03000081,
+        SSL_kGOST,
+        SSL_aGOST,
+        SSL_eGOST,
+        SSL_iGOST,
+        SSL_HANDSHAKE_MAC_SHA256,
+    },
+#endif // GOSTSSL
+
     // PSK cipher suites.
 
     // Cipher 8C
@@ -424,6 +438,46 @@ static constexpr SSL_CIPHER kCiphers[] = {
 
     // ChaCha20-Poly1305 cipher suites.
 
+#ifndef NO_GOSTSSL
+
+    /* Cipher C100 (GOSTSSL) */
+    {
+        "GOST2012-GOST15K-GOST15K",
+        "TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC",
+        0x0300C100,
+        SSL_kGOST,
+        SSL_aGOST,
+        SSL_eGOST,
+        SSL_iGOST,
+        SSL_HANDSHAKE_MAC_SHA256,
+    },
+
+    /* Cipher C101 (GOSTSSL) */
+    {
+        "GOST2012-GOST15M-GOST15M",
+        "TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC",
+        0x0300C101,
+        SSL_kGOST,
+        SSL_aGOST,
+        SSL_eGOST,
+        SSL_iGOST,
+        SSL_HANDSHAKE_MAC_SHA256,
+    },
+
+    /* Cipher C102 (GOSTSSL) */
+    {
+        "IANA-GOST2012-GOST8912-GOST8912",
+        "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT",
+        0x0300C102,
+        SSL_kGOST,
+        SSL_aGOST,
+        SSL_eGOST,
+        SSL_iGOST,
+        SSL_HANDSHAKE_MAC_SHA256,
+    },
+
+#endif // GOSTSSL
+
     // Cipher CCA8
     {
      TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
@@ -460,6 +514,22 @@ static constexpr SSL_CIPHER kCiphers[] = {
      SSL_HANDSHAKE_MAC_SHA256,
     },
 
+#ifndef NO_GOSTSSL
+
+    /* Cipher FF85 (GOSTSSL) */
+    {
+        "GOST2012-GOST8912-GOST8912",
+        "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT",
+        0x0300FF85,
+        SSL_kGOST,
+        SSL_aGOST,
+        SSL_eGOST,
+        SSL_iGOST,
+        SSL_HANDSHAKE_MAC_SHA256,
+    },
+
+#endif // GOSTSSL
+
 };
 
 Span<const SSL_CIPHER> AllCiphers() {
@@ -1206,6 +1276,17 @@ bool ssl_create_cipher_list(UniquePtr<SSLCipherPreferenceList> *out_cipher_list,
   ssl_cipher_apply_rule(0, ~0u, ~0u, SSL_3DES, ~0u, 0, CIPHER_ADD, -1, false,
                         &head, &tail);
 
+#ifndef NO_GOSTSSL
+  if( gostssl() )
+  {
+      ssl_cipher_apply_rule( 0, ~0u, ~0u, SSL_eGOST, ~0u, 0, CIPHER_ADD, -1, 0, &head, &tail );
+  }
+  else
+  {
+      ssl_cipher_apply_rule( 0, ~0u, ~0u, SSL_eGOST, ~0u, 0, CIPHER_KILL, -1, 0, &head, &tail );
+  }
+#endif // GOSTSSL
+
   // Temporarily enable everything else for sorting
   ssl_cipher_apply_rule(0, ~0u, ~0u, ~0u, ~0u, 0, CIPHER_ADD, -1, false, &head,
                         &tail);
@@ -1421,6 +1502,9 @@ int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *cipher) {
     case SSL_kRSA:
       return NID_kx_rsa;
     case SSL_kECDHE:
+#ifndef NO_GOSTSSL
+    case SSL_kGOST:
+#endif // GOSTSSL
       return NID_kx_ecdhe;
     case SSL_kPSK:
       return NID_kx_psk;
@@ -1436,6 +1520,9 @@ int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *cipher) {
     case SSL_aRSA:
       return NID_auth_rsa;
     case SSL_aECDSA:
+#ifndef NO_GOSTSSL
+    case SSL_aGOST:
+#endif // GOSTSSL
       return NID_auth_ecdsa;
     case SSL_aPSK:
       return NID_auth_psk;
@@ -1558,6 +1645,9 @@ int SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *out_alg_bits) {
 
     case SSL_AES256:
     case SSL_AES256GCM:
+#ifndef NO_GOSTSSL
+    case SSL_eGOST:
+#endif // GOSTSSL
     case SSL_CHACHA20POLY1305:
       alg_bits = 256;
       strength_bits = 256;
diff --git a/ssl/ssl_lib.cc b/ssl/ssl_lib.cc
index 4764000c1..440a22efb 100644
--- a/ssl/ssl_lib.cc
+++ b/ssl/ssl_lib.cc
@@ -554,6 +554,161 @@ static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b) {
   return OPENSSL_memcmp(a->session_id, b->session_id, a->session_id_length);
 }
 
+#ifndef NO_GOSTSSL
+int boring_BIO_read(SSL *s, void *data, int len) {
+  return BIO_read(s->rbio.get(), data, len);
+}
+
+int boring_BIO_write(SSL *s, const void *data, int len) {
+  return BIO_write(s->wbio.get(), data, len);
+}
+
+void boring_ERR_clear_error(void) { ERR_clear_error(); }
+
+void boring_ERR_put_error(int a, int b, int c, const char *file,
+                          unsigned line) {
+  ERR_put_error(a, b, c, file, line);
+}
+
+const SSL_CIPHER *boring_SSL_get_cipher_by_value(uint16_t value) {
+  return SSL_get_cipher_by_value(value);
+}
+
+// (ssl_parse_client_CA_list)
+char boring_set_ca_names_cb(SSL *ssl, const char **bufs, int *lens,
+                            size_t count) {
+  UniquePtr<STACK_OF(CRYPTO_BUFFER)> ret(sk_CRYPTO_BUFFER_new_null());
+
+  if (!ret)
+    return 0;
+
+  for (size_t i = 0; i < count; i++) {
+    UniquePtr<CRYPTO_BUFFER> buffer(
+        CRYPTO_BUFFER_new((const uint8_t *)bufs[i], lens[i], ssl->ctx->pool));
+
+    if (!buffer || !PushToStack(ret.get(), std::move(buffer)))
+      return 0;
+  }
+
+  if (!ssl->ctx->x509_method->check_client_CA_list(ret.get()))
+    return 0;
+
+  ssl->s3->hs->cert_request = true;
+  ssl->s3->hs->ca_names = std::move(ret);
+
+  return 1;
+}
+
+char boring_set_connected_cb(SSL *ssl, const char *alpn, size_t alpn_len,
+                             uint16_t version, uint16_t cipher_id,
+                             const char **bufs, int *lens, size_t count) {
+  SSL_HANDSHAKE *hs = ssl->s3->hs.get();
+
+  if (!hs->new_session) {
+    // ALPN (ssl_negotiate_alpn)
+    {
+      if (!ssl->s3->alpn_selected.CopyFrom(
+              Span<uint8_t>((uint8_t *)alpn, alpn_len)))
+        return 0;
+    }
+
+    // VERSION + CIPHER
+    {
+      const SSL_CIPHER *cipher = SSL_get_cipher_by_value(cipher_id);
+
+      if (!cipher)
+        return 0;
+
+      ssl->version = version;
+      ssl->s3->have_version = 1;
+
+      if (ssl_get_new_session(ssl->s3->hs.get(), 0) <= 0)
+        return 0;
+
+      // SERVER CERTIFICATES (ssl_parse_cert_chain)
+      {
+        UniquePtr<STACK_OF(CRYPTO_BUFFER)> ret(sk_CRYPTO_BUFFER_new_null());
+
+        if (!ret)
+          return 0;
+
+        for (size_t i = 0; i < count; i++) {
+          UniquePtr<CRYPTO_BUFFER> buffer(CRYPTO_BUFFER_new(
+              (const uint8_t *)bufs[i], lens[i], ssl->ctx->pool));
+
+          if (!buffer || !PushToStack(ret.get(), std::move(buffer)))
+            return 0;
+        }
+
+        ssl->s3->hs->new_session->certs = std::move(ret);
+        ssl->s3->hs->new_session->cipher = cipher;
+      }
+    }
+
+    // callback in chromiuim >= 73
+    {
+      uint8_t alert = SSL_AD_CERTIFICATE_UNKNOWN;
+      enum ssl_verify_result_t ret = ssl_verify_invalid;
+      if (hs->config->custom_verify_callback != nullptr) {
+        ret = hs->config->custom_verify_callback(ssl, &alert);
+        switch (ret) {
+          case ssl_verify_ok:
+            hs->new_session->verify_result = X509_V_OK;
+            break;
+          case ssl_verify_invalid:
+            // If |SSL_VERIFY_NONE|, the error is non-fatal, but we keep the
+            // result.
+            if (hs->config->verify_mode == SSL_VERIFY_NONE) {
+              ERR_clear_error();
+              ret = ssl_verify_ok;
+            }
+            hs->new_session->verify_result =
+                X509_V_ERR_APPLICATION_VERIFICATION;
+            break;
+          case ssl_verify_retry:
+            break;
+        }
+      }
+
+      if (ret == ssl_verify_invalid) {
+        OPENSSL_PUT_ERROR(SSL, SSL_R_CERTIFICATE_VERIFY_FAILED);
+        return 0;
+      }
+    }
+  }
+
+  ssl->s3->established_session = std::move(ssl->s3->hs->new_session);
+  ssl->s3->hs->new_session.reset();
+  ssl->s3->established_session->ssl_version = ssl->version;
+
+  // SSL_CB_HANDSHAKE_DONE
+  if (ssl->info_callback != NULL)
+    ssl->info_callback(ssl, SSL_CB_HANDSHAKE_DONE, 1);
+  else if (ssl->ctx->info_callback != NULL)
+    ssl->ctx->info_callback(ssl, SSL_CB_HANDSHAKE_DONE, 1);
+
+  ssl->s3->hs->handshake_finalized = true;
+  ssl->s3->initial_handshake_complete = true;
+
+  return 1;
+}
+
+char gostssl() {
+  static char is_gostssl = 0;
+
+  if( is_gostssl == 1 )
+    return 1;
+
+  if( is_gostssl == 0 )
+      is_gostssl = gostssl_init() ? 1 : -1;
+
+  if( is_gostssl == 1 )
+    return 1;
+  return 0;
+}
+
+#endif // GOSTSSL
+
 ssl_ctx_st::ssl_ctx_st(const SSL_METHOD *ssl_method)
     : method(ssl_method->method),
       x509_method(ssl_method->x509_method),
@@ -744,6 +899,11 @@ SSL_CONFIG::~SSL_CONFIG() {
 }
 
 void SSL_free(SSL *ssl) {
+#ifndef NO_GOSTSSL
+  if (ssl && gostssl()) {
+    gostssl_free(ssl);
+  }
+#endif // GOSTSSL
   Delete(ssl);
 }
 
@@ -872,6 +1032,16 @@ int SSL_provide_quic_data(SSL *ssl, enum ssl_encryption_level_t level,
 }
 
 int SSL_do_handshake(SSL *ssl) {
+#ifndef NO_GOSTSSL
+  if (gostssl()) {
+    int is_gost;
+    int ret_gost;
+
+    ret_gost = gostssl_connect(ssl, &is_gost);
+    if (is_gost)
+      return ret_gost;
+  }
+#endif // GOSTSSL
   ssl_reset_error_state(ssl);
 
   if (ssl->do_handshake == NULL) {
@@ -1055,6 +1225,16 @@ static int ssl_read_impl(SSL *ssl) {
 }
 
 int SSL_read(SSL *ssl, void *buf, int num) {
+#ifndef NO_GOSTSSL
+  if (gostssl()) {
+    int is_gost;
+    int ret_gost;
+
+    ret_gost = gostssl_read(ssl, buf, num, &is_gost);
+    if (is_gost)
+      return ret_gost;
+  }
+#endif // GOSTSSL
   int ret = SSL_peek(ssl, buf, num);
   if (ret <= 0) {
     return ret;
@@ -1070,6 +1250,16 @@ int SSL_read(SSL *ssl, void *buf, int num) {
 }
 
 int SSL_peek(SSL *ssl, void *buf, int num) {
+#ifndef NO_GOSTSSL
+  if (gostssl()) {
+    int is_gost;
+    int ret_gost;
+
+    ret_gost = gostssl_peek(ssl, buf, num, &is_gost);
+    if (is_gost)
+      return ret_gost;
+  }
+#endif // GOSTSSL
   if (ssl->quic_method != nullptr) {
     OPENSSL_PUT_ERROR(SSL, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
     return 0;
@@ -1089,6 +1279,16 @@ int SSL_peek(SSL *ssl, void *buf, int num) {
 }
 
 int SSL_write(SSL *ssl, const void *buf, int num) {
+#ifndef NO_GOSTSSL
+  if (gostssl()) {
+    int is_gost;
+    int ret_gost;
+
+    ret_gost = gostssl_write(ssl, buf, num, &is_gost);
+    if (is_gost)
+      return ret_gost;
+  }
+#endif // GOSTSSL
   ssl_reset_error_state(ssl);
 
   if (ssl->quic_method != nullptr) {
@@ -2376,6 +2576,10 @@ EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx) {
 }
 
 const SSL_CIPHER *SSL_get_current_cipher(const SSL *ssl) {
+#ifndef NO_GOSTSSL
+  if (ssl->s3->established_session && ssl->s3->established_session->cipher)
+    return ssl->s3->established_session->cipher;
+#endif // GOSTSSL
   const SSL_SESSION *session = SSL_get_session(ssl);
   return session == nullptr ? nullptr : session->cipher;
 }
-- 
2.17.0.windows.1

