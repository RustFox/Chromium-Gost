From 3ac5d353f22cebe5e88b2565ed5872e6ae8059df Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Tue, 6 May 2025 12:31:50 +0300
Subject: [PATCH] extensions-manifestv2.patch (ifdef)

---
 .../developer_private/extension_info_generator_desktop.cc | 2 ++
 chrome/browser/extensions/extension_management.cc         | 8 ++++++++
 .../browser/extensions/manifest_v2_experiment_manager.cc  | 6 ++++++
 chrome/browser/ui/webui/extensions/extensions_ui.cc       | 2 +-
 extensions/common/extension.cc                            | 2 ++
 5 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/chrome/browser/extensions/api/developer_private/extension_info_generator_desktop.cc b/chrome/browser/extensions/api/developer_private/extension_info_generator_desktop.cc
index 72e902ffdc893..499d682a8c8ab 100644
--- a/chrome/browser/extensions/api/developer_private/extension_info_generator_desktop.cc
+++ b/chrome/browser/extensions/api/developer_private/extension_info_generator_desktop.cc
@@ -61,6 +61,7 @@ void ExtensionInfoGenerator::FillExtensionInfo(
     info.controlled_info.emplace();
     info.controlled_info->text =
         l10n_util::GetStringUTF8(IDS_EXTENSIONS_INSTALL_LOCATION_ENTERPRISE);
+#if 0
   } else {
     // Create Safety Hub information for any non-enterprise extension.
     developer::SafetyCheckWarningReason warning_reason =
@@ -72,6 +73,7 @@ void ExtensionInfoGenerator::FillExtensionInfo(
           ExtensionSafetyCheckUtils::GetSafetyCheckWarningStrings(
               warning_reason, state);
     }
+#endif
   }
 
   // Dependent extensions.
diff --git a/chrome/browser/extensions/extension_management.cc b/chrome/browser/extensions/extension_management.cc
index ae782891ad341..e44f9fb64f8d6 100644
--- a/chrome/browser/extensions/extension_management.cc
+++ b/chrome/browser/extensions/extension_management.cc
@@ -322,6 +322,9 @@ bool ExtensionManagement::IsAllowedManifestVersion(
     int manifest_version,
     const std::string& extension_id,
     Manifest::Type manifest_type) {
+#if 1
+      return true;
+#else
   bool enabled_by_default =
       !base::FeatureList::IsEnabled(
           extensions_features::kExtensionsManifestV3Only) ||
@@ -347,6 +350,7 @@ bool ExtensionManagement::IsAllowedManifestVersion(
              installation_mode == ManagedInstallationMode::kForced ||
              installation_mode == ManagedInstallationMode::kRecommended;
   }
+#endif
 }
 
 bool ExtensionManagement::IsAllowedManifestVersion(const Extension* extension) {
@@ -367,6 +371,9 @@ bool ExtensionManagement::IsExemptFromMV2DeprecationByPolicy(
     return false;
   }
 
+#if 1
+  return true;
+#else
   switch (global_settings_->manifest_v2_setting) {
     case internal::GlobalSettings::ManifestV2Setting::kDefault:
       // Default browser behavior. Not exempt.
@@ -387,6 +394,7 @@ bool ExtensionManagement::IsExemptFromMV2DeprecationByPolicy(
   }
 
   return false;
+#endif
 }
 
 bool ExtensionManagement::IsAllowedByUnpublishedAvailabilityPolicy(
diff --git a/chrome/browser/extensions/manifest_v2_experiment_manager.cc b/chrome/browser/extensions/manifest_v2_experiment_manager.cc
index 13f7aab6198b2..ef275b90b0159 100644
--- a/chrome/browser/extensions/manifest_v2_experiment_manager.cc
+++ b/chrome/browser/extensions/manifest_v2_experiment_manager.cc
@@ -146,6 +146,7 @@ bool ManifestV2ExperimentManagerFactory::ServiceIsCreatedWithBrowserContext()
 
 // Determines the current stage of the MV2 deprecation experiments.
 MV2ExperimentStage CalculateCurrentExperimentStage() {
+#if 0
   // Return the "highest" stage that is currently active for the user.
   if (base::FeatureList::IsEnabled(
           extensions_features::kExtensionManifestV2Unsupported)) {
@@ -162,6 +163,7 @@ MV2ExperimentStage CalculateCurrentExperimentStage() {
     return MV2ExperimentStage::kWarning;
   }
 
+#endif
   return MV2ExperimentStage::kNone;
 }
 
@@ -201,6 +203,9 @@ PrefMap GetGlobalNoticeAcknowledgedPrefFor(
 // Returns true if legacy extensions should be disabled, looking at both
 // experiment stage and global state.
 bool ShouldDisableLegacyExtensions(MV2ExperimentStage stage) {
+#if 1
+  return false;
+#else
   if (g_allow_mv2_for_testing) {
     // We allow legacy MV2 extensions for testing purposes.
     return false;
@@ -214,6 +219,7 @@ bool ShouldDisableLegacyExtensions(MV2ExperimentStage stage) {
     case MV2ExperimentStage::kUnsupported:
       return true;
   }
+#endif
 }
 
 // Returns true if the given `stage` is one in which extension enablement should
diff --git a/chrome/browser/ui/webui/extensions/extensions_ui.cc b/chrome/browser/ui/webui/extensions/extensions_ui.cc
index f769bdb059156..f01ffd22ec9d4 100644
--- a/chrome/browser/ui/webui/extensions/extensions_ui.cc
+++ b/chrome/browser/ui/webui/extensions/extensions_ui.cc
@@ -490,7 +490,7 @@ content::WebUIDataSource* CreateAndAddExtensionsSource(Profile* profile,
           extensions_features::kExtensionsMenuAccessControlWithPermittedSites));
   source->AddBoolean(
       "safetyHubThreeDotDetails",
-      base::FeatureList::IsEnabled(features::kSafetyHubThreeDotDetails));
+      false);
 
 #if BUILDFLAG(IS_ANDROID)
   source->AddResourcePath("images/product_logo.png",
diff --git a/extensions/common/extension.cc b/extensions/common/extension.cc
index cd6a7eb4b6d8d..af24c9f835cb8 100644
--- a/extensions/common/extension.cc
+++ b/extensions/common/extension.cc
@@ -96,6 +96,7 @@ bool IsManifestSupported(int manifest_version,
   // Supported versions are always safe.
   if (manifest_version >= kMinimumSupportedManifestVersion &&
       manifest_version <= kMaximumSupportedManifestVersion) {
+#if 0
     // Emit a warning for unpacked extensions on Manifest V2 warning that
     // MV2 is deprecated.
     if (type == Manifest::TYPE_EXTENSION && manifest_version == 2 &&
@@ -103,6 +104,7 @@ bool IsManifestSupported(int manifest_version,
         !g_silence_deprecated_manifest_version_warnings) {
       *warning = errors::kManifestV2IsDeprecatedWarning;
     }
+#endif
     return true;
   }
 
-- 

